#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <assert.h>
#include <pthread.h>
#include "defs.h"
#include "hash_list_lock.h"

#define SAMPLES_TO_COLLECT   10000000
#define RAND_NUM_UPPER_BOUND   100000
#define NUM_SEED_STREAMS            4

//#define DEBUG

#ifdef DEBUG
    #define DBG_PRINTF(...) printf(__VA_ARGS__)
    #define DBG_ASSERT(x)   assert(x)
#else
    #define DBG_PRINTF(...)
    #define DBG_ASSERT(x)
#endif

/* 
 * ECE454 Students: 
 * Please fill in the following team struct 
 */
team_t team = {
  "The Wacky Wizards",          /* Team name */

  "Anthony Alayo",              /* First member full name */
  "997487401",                  /* First member student number */
  "alayoant@ecf.utoronto.ca",   /* First member email address */

  "Freddy Chen",                /* Second member full name */
  "997363124",                  /* Second member student number */
  "chenfre1@ecf.utoronto.ca"    /* Second member email address */
};

unsigned num_threads;
unsigned samples_to_skip;

class sample;

class sample {
  unsigned my_key;
  public:
  sample *next;
  unsigned count;

  sample(unsigned the_key){my_key = the_key; count = 0;};
  unsigned key(){return my_key;}
  void print(FILE *f){printf("%d %d\n",my_key,count);}
};

// This instantiates an empty hash table
// it is a C++ template, which means we define the types for
// the element and key value here: element is "class sample" and
// key value is "unsigned".  
hash<sample,unsigned> h;

// array of thread ids
pthread_t tid[4];

/**************************
  Function Prototypes
 **************************/
void initialize_threads(void) __attribute__((always_inline));
int pthread_index(void) __attribute__((always_inline));
int determine_pthread_start(void) __attribute__((always_inline));
int determine_pthread_end(int) __attribute__((always_inline));
void *randtrack(void*) __attribute__((always_inline));

/**************************
  Function Implementations
 **************************/
void initialize_threads() {
  int i, retval;

  switch(num_threads) {
    case 1:
      retval = pthread_create(&(tid[0]), NULL, &randtrack, NULL);
      if(retval != 0){
        printf("\nERROR creating thread: [%d]\n",retval);
        exit(EXIT_FAILURE);
      }
      DBG_PRINTF("Successfully created thread for tid[0]!\n");
      break;

    case 2:
      for(i = 0; i < num_threads*2; i+=2){
        retval = pthread_create(&(tid[i]), NULL, &randtrack, NULL);
        if(retval != 0){
          printf("\nERROR creating thread: [%d]\n",retval);
          exit(EXIT_FAILURE);
        }
        DBG_PRINTF("Successfully created thread for tid[%d]!\n",i);
      }
      break;

    case 4: 
      for(i = 0; i < num_threads; i++){
        retval = pthread_create(&(tid[i]), NULL, &randtrack, NULL);
        if(retval != 0){
          printf("\nERROR creating thread: [%d]\n",retval);
          exit(EXIT_FAILURE);
        }
        DBG_PRINTF("Successfully created thread for tid[%d]!\n",i);
      }
      break;

    default:
      // should never come here
      // invalid thread count caught earlier in main
      break;
  }
}

int pthread_index(void) {
  int i;
  pthread_t id = pthread_self();
  for(i = 0; i < num_threads; i++) {
    if(pthread_equal(id,tid[i]))
      break;
  }
  return i;
}

int determine_pthread_start(void) {
  return pthread_index();
}

int determine_pthread_end(int start) {
  return 4/num_threads + start;
}


void *randtrack(void* arg) {
  int i,j,k;
  int seed_start, seed_end;
  int rnum;
  unsigned key;
  unsigned index;
  sample *s;

  // determine the appropriate starting seed
  seed_start = determine_pthread_start();
  
  // determine the appropriate ending seed  
  seed_end = determine_pthread_end(seed_start);

  DBG_PRINTF("pthread %d about to start some work\n",pthread_index());
  DBG_PRINTF("start seed: %d end seed: %d\n",seed_start, seed_end-1);

  // process streams depending on seed assigned to thread
  for (i=seed_start; i<seed_end; i++){
    rnum = i;
    DBG_PRINTF("collecting samples with seed %d\n",i);

    // collect a number of samples
    for (j=0; j<SAMPLES_TO_COLLECT; j++){

      // skip a number of samples
      // record 1 out of every samples_to_skip into the hash table
      for (k=0; k<samples_to_skip; k++){
        rnum = rand_r((unsigned int*)&rnum);
      }

      // force the sample to be within the range of 0..RAND_NUM_UPPER_BOUND-1
      key = rnum % RAND_NUM_UPPER_BOUND;

      // if this sample has not been counted before
      s = h.lookup_and_insert_if_absent(key, &index);

      // increment the count for the sample
      h.lock_list(index);
      s->count++;
      h.unlock_list(index);
    }
  }

  //terminate ourself to signal the main thread
  pthread_exit(NULL);
}

int main (int argc, char* argv[]){
  int i;

  // Print out team information
  printf( "Team Name: %s\n", team.team );
  printf( "\n" );
  printf( "Student 1 Name: %s\n", team.name1 );
  printf( "Student 1 Student Number: %s\n", team.number1 );
  printf( "Student 1 Email: %s\n", team.email1 );
  printf( "\n" );
  printf( "Student 2 Name: %s\n", team.name2 );
  printf( "Student 2 Student Number: %s\n", team.number2 );
  printf( "Student 2 Email: %s\n", team.email2 );
  printf( "\n" );

  // Parse program arguments
  if (argc != 3){
    printf("Usage: %s <num_threads> <samples_to_skip>\n", argv[0]);
    exit(1);  
  }
  sscanf(argv[1], " %d", &num_threads); 
  sscanf(argv[2], " %d", &samples_to_skip); // doesn't make sense when zero

  DBG_ASSERT(num_threads == 1 || num_threads == 2 || num_threads == 4); 

  // initialize a 16K-entry (2**14) hash of empty lists
  h.setup(14);

  // initialize threads to do the work for randtrack
  initialize_threads();

  // wait for all threads to finish before printing
  DBG_PRINTF("main thread now waiting on worker threads\n");
  if(num_threads == 2) {
    pthread_join(tid[0],NULL);
    pthread_join(tid[2],NULL);
  } else {  
    for(i = 0; i < num_threads; i++) {
      pthread_join(tid[i], NULL);
    }
  }
  DBG_PRINTF("all worker threads finished their work!\n",i);

  // print a list of the frequency of all samples
  h.print();
  return(EXIT_SUCCESS);
}